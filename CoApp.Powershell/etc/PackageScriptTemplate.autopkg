// Implicity loaded template script for Autopackage
// This file is automatically imported into Autopackage to set the defaults 

@import "Pivots.properties";

#defines { 
    conditionFolder = ${ElementId};
}

nuget := {
    // built-in defines 
    #defines { 
    
        framework      = native,
    
        content_root   = /content/${framework},
        tools_root     = /tools/${framework},
        lib_root       = /lib/${framework},
        build_root     = /build/${framework},
        src_root       = /src/${framework},

        d_include   = ${build_root}/include/${conditionFolder},
        d_docs      = ${build_root}/docs/${conditionFolder},
        d_bin       = ${build_root}/bin/${conditionFolder},  
        d_lib       = ${build_root}/lib/${conditionFolder},
        d_tools     = ${tools_root}/${conditionFolder},
        d_src       = ${src_root}/${conditionFolder},

        // since the generated msbuild props/targets files are always in a directory two 
        // deep from the package root.
        pkg_root    = $(MSBuildThisFileDirectory)../../,
    };

    files {
        @alias _targets = ::nuget.targets.[ ${condition} ];
        @alias Items = _targets.ItemGroup;


        #output {
            package = default;
        };

        bin += {  
            #add-each-file : { 
                Items.CopyToOutput;
                Items.DeploymentContent;
            };
            
            #add-folder : ::nuget.targets.[${condition}].BuildTimePath;

            #destination : ${d_bin};  
        };

        redist += {  
            #add-all-files : { 
                Items.CopyToOutput;
			};

            #destination : ${d_bin};  
        };

        symbols += {  
            #destination : ${d_bin};  

			#add-each-file : { 
                Items.CopyToOutput;
            };
        };

        source += {  
            #destination : ${d_src};  
        };

        src += {  
            #destination : ${d_src};  
        };

        tools += {  
            #add-folder : ::nuget.targets.[${condition}].BuildTimePath;
            #destination : ${d_tools};  
        };

        lib += { 
            // add each file as a link rule
            #add-each-file : {
                ::nuget.targets.[${condition}].Libraries,
            };
           
            #flatten = true;
            #destination = ${d_lib}; 
        };

        include += { 
            #add-folder : { 
                ::nuget.targets.[${condition}].Includes;
                ::nuget.targets.[${condition}].RcIncludes;
            };
            #destination : ${d_include}; 
            
            // makes sure that these files end up in the base package, 
            // not in one of the sub-packages.
            #overlay : false; 
        };

        nestedInclude += { 
            // makes sure that these files end up in the base package, 
            // not in one of the sub-packages.
            #overlay : false; 
        };

        docs += { 
            #destination : ${d_docs};   

            // makes sure that these files end up in the base package, 
            // not in one of the sub-packages.
            #overlay : false; 
        };
    };
    
    
    targets {
        @alias Includes = ItemDefinitionGroup.ClCompile.AdditionalIncludeDirectories;
        @alias LibraryFolders = ItemDefinitionGroup.Link.AdditionalLibraryDirectories;
        @alias RcIncludes = ItemDefinitionGroup.ResourceCompile.AdditionalIncludeDirectories;
        @alias Defines = ItemDefinitionGroup.ClCompile.PreprocessorDefinitions;
        @alias Libraries = ItemDefinitionGroup.Link.AdditionalDependencies;
        @alias LibLibraries = ItemDefinitionGroup.Lib.AdditionalDependencies;
        @alias ForcedIncludes = ItemDefinitionGroup.ClCompile.ForcedIncludeFiles;

        ExpectedRuntimeLibrary = none;
        
        AfterBuild {
            .Copy {
                   SourceFiles = @(CopyToOutput);
                   DestinationFolder = $(TargetDir);
                   SkipUnchangedFiles = true;
                   UseHardlinksIfPossible = true;
            };
        };
    };
    
    props {
        @alias Includes = ItemDefinitionGroup.ClCompile.AdditionalIncludeDirectories;
        @alias LibraryFolders = ItemDefinitionGroup.Link.AdditionalLibraryDirectories;
        @alias RcIncludes = ItemDefinitionGroup.ResourceCompile.AdditionalIncludeDirectories;
        @alias Libraries = ItemDefinitionGroup.Link.AdditionalDependencies;
        @alias Defines = ItemDefinitionGroup.ClCompile.PreprocessorDefinitions;
        @alias LibLibraries = ItemDefinitionGroup.Lib.AdditionalDependencies;
        @alias ForcedIncludes = ItemDefinitionGroup.ClCompile.ForcedIncludeFiles;

    };
};